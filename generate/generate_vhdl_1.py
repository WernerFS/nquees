def vhdl_nqueens(n):
    with open('nqueens_1.txt', 'w') as f:
        f.write('architecture rtl of top_nqueens is \n \n')
        for i in range(n-1, 0, -1):
            f.write('    constant K_{}: integer := {}; \n'.format(i, i))
            f.write('    signal a_in_{}: std_logic_vector((N*K_{}-1) downto 0); \n'.format(i, i))
            f.write('    signal a_out_{}: std_logic_vector((N*(K_{}+1)-1) downto 0); \n'.format(i, i))
            f.write('    signal ack_in_{}, next_in_{}, ack_out_{}, next_out_{}: std_logic; \n'.format(i, i, i, i))
            f.write('    signal output_state_{}: std_logic_vector(2 downto 0); \n \n'.format(i))
        f.write('    signal counter_s: unsigned(P downto 0); \n')
        f.write('    signal flag_s, done_s: std_logic; \n') 
        f.write('    constant impar: std_logic_vector(0 downto 0) := std_logic_vector(to_unsigned(M,1)); \n \n')
        f.write('begin \n \n')
        for i in range(n-1, 0, -1):
                f.write('    fsm_{}: entity work.fsm \n'.format(i))
                f.write('    generic map (K => {}, M => M, N =>N) \n'.format(i))
                f.write('    port map (clk=>clk, nRst=>nRst, a_in=>a_in_{}, ack_in=>ack_in_{}, next_in=>next_in_{}, a_out=>a_out_{}, ack_out=>ack_out_{}, next_out=>next_out_{}, output_state=>output_state_{}); \n \n'.format(i,i,i,i,i,i,i))
        for i in range(n-2, 0, -1):
                f.write('    a_in_{} <= a_out_{}; \n'.format(i+1,i))
                f.write('    ack_in_{}  <= ack_out_{}; \n'.format(i+1,i))
                f.write('    next_in_{} <= next_out_{};    \n \n'.format(i,i+1))
        f.write('    counter <= std_logic_vector(counter_s); \n')
        f.write('    done <= done_s; \n \n')
        f.write('    counter_process: process(nRst, ack_out_{}) \n'.format(n-1))
        f.write('    begin \n')
        f.write("        if nRst = '1' then \n")
        f.write("            counter_s <= (others=>'0'); \n")
        f.write("            next_in_{} <= '0'; \n".format(n-1))
        f.write("        elsif (ack_out_{}'event and ack_out_{} = '0') then \n".format(n-1, n-1))
        f.write("            if flag_s = '1' and impar(0) = '1' then \n")
        f.write('                counter_s <= counter_s + 1; \n')
        f.write('            else \n')
        f.write('                counter_s <= counter_s + 2; \n')
        f.write('            end if; \n')
        f.write("            next_in_{} <= '1'; \n".format(n-1))
        f.write('        end if; \n')
        f.write('    end process; \n')

vhdl_nqueens(5)